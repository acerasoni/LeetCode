// https://leetcode.com/problems/zigzag-conversion/submissions/
// O(n^2)

class Solution {
    public String convert(String s, int numRows) {
        if(s == null || s.length() == 0) return new String();
        if(numRows == 1) return s;
        char[][] pattern = new char[numRows][s.length()];
        int[][] directions = {{1,0}, {-1,1}};
        boolean flip = false;
        StringBuilder sb = new StringBuilder();
        int col = 0, row = 0, count = 0;
        
        for(int i = 0; i < s.length(); i++) {
            System.out.println("Col: " + col + "Row: " + row);
            pattern[col][row] = s.charAt(i);   
            
            if(col == numRows - 1) flip = true;
            else if(col == 0) flip = false;
            
            if(!flip) col++;                 
            else {
             col--; row++;
            }
        }
        
        for(int i = 0; i < numRows ; i++) {
            for(int l = 0; l < s.length(); l++) {
                if(pattern[i][l] != '\u0000') sb.append(Character.toString(pattern[i][l]));
            }
        }
        
        return sb.toString();   
    }
}
