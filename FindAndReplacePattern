// https://leetcode.com/problems/find-and-replace-pattern
// Complexity is O(nx) where n = words.length and x = words[n].length

class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
      List<String> result = new ArrayList<>();
        
      for(int x = 0; x < words.length; x++) {
          isPermutation(words[x], pattern, result);
      }
        
        return result;
    }
    
    private void isPermutation(String a, String b, List<String> result) {
        Map<Character, Character> chars = new HashMap<>();
        Map<Character, Character> chars2 = new HashMap<>();
        
         for(int i = 0; i < a.length(); i++) {
             if(chars.get(a.charAt(i)) != null) 
             if(chars.get(a.charAt(i)) != b.charAt(i))
             return;
             
             if(chars2.get(b.charAt(i)) != null) 
             if(chars2.get(b.charAt(i)) != a.charAt(i))
             return;
             
             chars.put(a.charAt(i), b.charAt(i));
             chars2.put(b.charAt(i), a.charAt(i));
         }
        result.add(a);
    }
}
