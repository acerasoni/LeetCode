// https://leetcode.com/problems/unique-morse-code-words
// Complexity is O(nx) where n = words.length and x = words[i].length

class Solution {
    public int uniqueMorseRepresentations(String[] words) {
        Set<String> transformations = new HashSet<>();
        Map<Character, String> map = new HashMap<>();
        StringBuilder curr = new StringBuilder();
        String[] alphabet = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        char a = 97;
        int result = 0;
        
        for(int y = 0; y < alphabet.length; y++){
            map.put(a, alphabet[y]);
            a++;
        }
        
        for(int i = 0; i < words.length; i++){
            for(int x = 0; x < words[i].length(); x++){
                curr.append(map.get(words[i].charAt(x)));
            }
            if(!transformations.contains(curr.toString())) {
               
                transformations.add(curr.toString());
                result++;
            }
            curr = new StringBuilder();
        }
        
        return result;
    }
}
