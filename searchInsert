// https://leetcode.com/problems/search-insert-position/
// Runtime O(log n) thanks to the binary search

class Solution {
    public int searchInsert(int[] nums, int target) {
        if(target < nums[0]) return 0;
        if(target > nums[nums.length-1]) return nums.length;
        
        return binarySearch(nums, target, 0, nums.length-1);
    }
    
    private int binarySearch(int[] nums, int target, int low, int high) {
        int mid, position = 0;
        
        while(low <= high) {
            mid = (high+low) / 2;
            
            if(high == low) {
                System.out.println(high + " " + low);
                if(nums[high] < target) return ++high;
                else if(nums[high] > target) return high;
            }
            
            if(nums[mid] == target) {
                return mid;
            } else if(nums[mid] > target) {
                high = mid-1;
            } else if(nums[mid] < target) {
                low = mid+1;
            } 
        }
        return low;
    }
}
