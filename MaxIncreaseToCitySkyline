// https://leetcode.com/problems/max-increase-to-keep-city-skyline
// Complexity is O(n^2)

class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        List<Integer> top = new ArrayList<>(grid.length);
        List<Integer> left = new ArrayList<>(grid.length);
        int increment = 0, tmp = 0;
        
        getViews(grid, top, left);
        
       for(int x = 0; x < grid.length; x++){
           for(int y = 0; y < grid[x].length; y++){
               tmp = grid[x][y];
               if(top.get(y) < left.get(x)) grid[x][y] = top.get(y);
               else grid[x][y] = left.get(x);
               increment += grid[x][y] - tmp; 
           }
       }
      return increment;
    }
    
    private void getViews(int[][] grid, List<Integer> top, List<Integer> left) {
         int maxTop = 0, maxLeft = 0;
         for(int i = 0; i < grid.length; i++){
            for(int y = 0; y < grid[i].length; y++){  
                if(grid[y][i] > maxTop) maxTop = grid[y][i];
                if(grid[i][y] > maxLeft) maxLeft = grid[i][y];
            }
            top.add(maxTop);
            left.add(maxLeft);
            maxTop = 0;
            maxLeft = 0;
        }
    }
}
